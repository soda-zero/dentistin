// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("account")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("session")
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?      @map("email_verified")
    role          String         @default("PATIENT")
    image         String?
    accounts      Account[]
    sessions      Session[]
    Doctor        Doctor?
    Appointments  Appointments[]
    createdAt     DateTime       @default(now()) @map(name: "created_at")
    updatedAt     DateTime       @updatedAt @map(name: "updated_at")
    insurance     Insurance?     @relation(fields: [insuranceId], references: [id])
    insuranceId   Int?           @map("insurance_id")

    @@map("user")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_token")
}

model Doctor {
    id               Int                     @id @default(autoincrement())
    doctorName       String                  @map("doctor_name")
    info             String? // @db.VarChar(4000)
    doctorImage      String?                 @map("doctor_image") // @db.VarChar(255)
    createdAt        DateTime                @default(now()) @map(name: "created_at")
    updatedAt        DateTime                @updatedAt @map(name: "updated_at")
    user             User                    @relation(fields: [userId], references: [id])
    userId           String                  @unique
    specializations  DoctorSpecializations[]
    appointments     Appointments[]
    DoctorInsurances DoctorInsurances[]

    @@map(name: "doctor")
}

model Specialization {
    id                     Int                     @id
    specializationName     String                  @map("specialization_name") // @db.VarChar(100)
    createdAt              DateTime                @default(now()) @map(name: "created_at")
    updatedAt              DateTime                @updatedAt @map(name: "updated_at")
    doctorsSpecializations DoctorSpecializations[]

    @@map(name: "specialization")
}

model DoctorSpecializations {
    id               Int            @id @default(autoincrement())
    doctor           Doctor         @relation(fields: [doctorId], references: [id])
    doctorId         Int            @map("doctor_id")
    specialization   Specialization @relation(fields: [specializationId], references: [id])
    specializationId Int            @map("specialization_id")
    createdAt        DateTime       @default(now()) @map(name: "created_at")
    updatedAt        DateTime       @updatedAt @map(name: "updated_at")

    @@index([doctorId, specializationId])
    @@map(name: "doctor_specialization")
}

model Insurance {
    id               Int                @id @default(autoincrement())
    insuranceName    String             @unique @map("insurance_name") // @db.VarChar(100)
    createdAt        DateTime           @default(now()) @map(name: "created_at")
    updatedAt        DateTime           @updatedAt @map(name: "updated_at")
    insuranceImage   String?            @map(name: "insurance_image") // @db.VarChar(255)
    doctorInsurances DoctorInsurances[]
    User             User[]

    @@map(name: "insurance")
}

model DoctorInsurances {
    id          String    @default(cuid())
    doctor      Doctor    @relation(fields: [doctorId], references: [id])
    doctorId    Int       @map("doctor_id")
    insurance   Insurance @relation(fields: [insuranceId], references: [id])
    insuranceId Int       @map("insurance_id")
    createdAt   DateTime  @default(now()) @map(name: "created_at")
    updatedAt   DateTime  @updatedAt @map(name: "updated_at")

    @@id([doctorId, insuranceId])
    @@map(name: "doctor_insurance")
}

model Appointments {
    id             Int      @id @default(autoincrement())
    user           User?    @relation(fields: [userId], references: [id])
    userId         String?  @map("user_id")
    doctor         Doctor   @relation(fields: [doctorId], references: [id])
    doctorId       Int      @map("doctor_id")
    date           DateTime
    slot           String
    isAvailable    Boolean  @default(true) @map("is_available")
    insurance      String?
    createdAt      DateTime @default(now()) @map(name: "created_at")
    updatedAt      DateTime @updatedAt @map(name: "updated_at")
    specialization String?

    @@unique([date, slot, doctorId])
    @@index([userId, doctorId])
    @@map(name: "appointment")
}

model Slots {
    id        Int      @id @default(autoincrement())
    slot      String
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map("slot")
}

// enum Role {
//     ADMIN
//     USER
//     DOCTOR
// }
